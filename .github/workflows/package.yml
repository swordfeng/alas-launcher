name: Pack alas-launcher

on:
  push:
    tags:
      - '*'
  workflow_dispatch: {}

env:
  UV_MANAGED_PYTHON: 1
  UV_PYTHON_INSTALL_DIR: ${{ github.workspace }}/python
  UV_PYTHON: 3.8.20

jobs:
  package:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
        include:
          - os: ubuntu-22.04
            python-platform: linux_x86_64
          - os: macos-latest
            python-platform: macosx_14_0_arm64
          - os: windows-latest
            python-platform: win_amd64

    steps:
      - name: Install Tauri dependencies (Ubuntu only)
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Get rdfind
        uses: knicknic/os-specific-run@v1.0.3
        with:
          linux: sudo apt-get install -y rdfind
          macos: brew install rdfind
      - name: Checkout
        uses: actions/checkout@v4
      - name: Rustup for cache
        run: rustup toolchain install stable --profile minimal
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build --verbose --release
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Python and dependencies with customized MXNet
        shell: bash
        run: |
          export PYTHON_PREFIX=$(uv run python -c 'import sys; print(sys.exec_prefix)')
          echo "PYTHON_PREFIX=$PYTHON_PREFIX" >> $GITHUB_ENV
          curl -L -O https://github.com/swordfeng/mxnet-build/releases/download/rev1/mxnet-1.9.1-cp38-cp38-${{ matrix.python-platform }}.whl
          uvx change_wheel_version mxnet-1.9.1-cp38-cp38-${{ matrix.python-platform }}.whl --version 1.6.99
          uv pip install --prefix "$PYTHON_PREFIX" --no-deps mxnet-1.6.99-cp38-cp38-${{ matrix.python-platform }}.whl
          uv pip install --prefix "$PYTHON_PREFIX" -r requirements.in
      - name: Get git
        uses: knicknic/os-specific-run@v1.0.3
        with:
          linux: |
            git clone https://github.com/git/git.git --branch v2.49.0 --depth 1
            cd git
            cat > conanfile.txt <<CONANFILE
            [requires]
            openssl/3.4.1
            libcurl/8.12.1
            expat/2.7.1
            pcre2/10.44
            [generators]
            AutotoolsDeps
            AutotoolsToolchain
            PkgConfigDeps
            CONANFILE
            container_id=$(docker run -d -v $PWD:/volume --rm -t quay.io/pypa/manylinux2010_x86_64:latest)
            docker exec -w /volume -t $container_id yum update
            docker exec -w /volume -t $container_id yum install -y gettext perl-IPC-Cmd perl-Digest-SHA
            docker exec -w /volume -t $container_id pipx install conan
            docker exec -w /volume -t $container_id conan profile detect --force
            docker exec -w /volume -t $container_id conan install . --build=missing --build="m4*"
            docker exec -w /volume -t $container_id make configure
            docker exec -w /volume -t $container_id bash -c 'source conanbuild.sh; \
              export RUNTIME_PREFIX=1
              export CURL_CONFIG="pkg-config libcurl"
              LDFLAGS+=" $LIBS"
              export LDFLAGS
              ./configure --with-openssl --with-curl --with-expat --without-tcltk --prefix=/; \
              make -j$(nproc) RUNTIME_PREFIX=1 CURL_CONFIG="$CURL_CONFIG" install DESTDIR=/volume/dist'
            sudo chown -R $USER:$USER .
          macos: |
            brew install autoconf
            git clone https://github.com/git/git.git --branch v2.49.0 --depth 1
            cd git
            make configure
            ./configure --with-openssl --with-curl --with-expat --without-tcltk --prefix=/
            make -j$(sysctl -n hw.logicalcpu) RUNTIME_PREFIX=1 install DESTDIR=$PWD/dist
          windows: |
            curl -L -O https://github.com/git-for-windows/git/releases/download/v2.49.0.windows.1/MinGit-2.49.0-64-bit.zip
            mkdir git
            cd git
            tar -xvf ..\MinGit-2.49.0-64-bit.zip
      - name: Get adb
        uses: knicknic/os-specific-run@v1.0.3
        with:
          macos: |
            curl -L -o adb.zip https://dl.google.com/android/repository/platform-tools-latest-darwin.zip
            unzip adb.zip
          linux: |
            curl -L -o adb.zip https://dl.google.com/android/repository/platform-tools-latest-linux.zip
            unzip adb.zip
          windows: |
            curl -L -o adb.zip https://dl.google.com/android/repository/platform-tools-latest-windows.zip
            tar -xvf adb.zip
      - name: Get ALAS
        run: |
          git clone https://github.com/LmeSzinc/AzurLaneAutoScript.git
      - name: Distribute
        uses: knicknic/os-specific-run@v1.0.3
        with:
          macos: |
            cd AzurLaneAutoScript
            mkdir -p toolkit/bin
            cp ../platform-tools/adb toolkit/bin/
            cp -r ../git/dist/* toolkit/
            cp -r $PYTHON_PREFIX/* toolkit/
            mkdir -p config
            cp ../deploy.unix.yaml config/deploy.yaml

            cd ${{ github.workspace }}
            mkdir -p AzurLaneAutoScript.app/Contents/MacOS
            cp target/release/alas-launcher AzurLaneAutoScript.app/Contents/MacOS/
            mkdir -p AzurLaneAutoScript.app/Contents/Resources
            cp icons/icon.icns AzurLaneAutoScript.app/Contents/Resources/
            cp -r AzurLaneAutoScript AzurLaneAutoScript.app/Contents/
            cp Info.plist AzurLaneAutoScript.app/Contents/
            rdfind -minsize 128 -makehardlinks true AzurLaneAutoScript.app
            XZ_OPT=-9 tar -cJf "AzurLaneAutoScript-${{ runner.os }}-$(uname -m).tar.xz" AzurLaneAutoScript.app

            cp deploy.unix-cn.yaml AzurLaneAutoScript.app/Contents/AzurLaneAutoScript/config/deploy.yaml
            (cd AzurLaneAutoScript.app/Contents/AzurLaneAutoScript && uv run python -c "import deploy.git; deploy.git.GitManager().git_install()")
            XZ_OPT=-9 tar -cJf "AzurLaneAutoScript-CN-${{ runner.os }}-$(uname -m).tar.xz" AzurLaneAutoScript
          linux: |
            cd AzurLaneAutoScript
            mkdir -p toolkit/bin
            cp ../platform-tools/adb toolkit/bin/
            cp -r ../git/dist/* toolkit/
            cp -r $PYTHON_PREFIX/* toolkit/
            cp ../deploy.unix.yaml config/deploy.yaml
            cp ../target/release/alas-launcher alas-launcher

            cd ${{ github.workspace }}
            rdfind -minsize 128 -makehardlinks true AzurLaneAutoScript
            XZ_OPT=-9 tar -cJf "AzurLaneAutoScript-${{ runner.os }}-$(uname -m).tar.xz" AzurLaneAutoScript

            cp deploy.unix-cn.yaml AzurLaneAutoScript/config/deploy.yaml
            (cd AzurLaneAutoScript && uv run python -c "import deploy.git; deploy.git.GitManager().git_install()")
            XZ_OPT=-9 tar -cJf "AzurLaneAutoScript-CN-${{ runner.os }}-$(uname -m).tar.xz" AzurLaneAutoScript
          windows: |
            cd AzurLaneAutoScript
            mkdir -p toolkit
            cp ..\platform-tools\adb.exe, ..\platform-tools\Adb*.dll toolkit\
            cp -r ..\git toolkit\
            cp -r ($env:PYTHON_PREFIX + "\*") toolkit\
            cp ..\deploy.windows.yaml config\deploy.yaml
            cp ..\target\release\alas-launcher.exe alas-launcher.exe

            cd ${{ github.workspace }}
            $env:GZIP="-9"; tar -czf "AzurLaneAutoScript-${{ runner.os }}-$($env:PROCESSOR_ARCHITECTURE.ToLower()).tar.gz" AzurLaneAutoScript

            cp deploy.windows-cn.yaml AzurLaneAutoScript\config\deploy.yaml
            pushd AzurLaneAutoScript
            uv run python -c "import deploy.git; deploy.git.GitManager().git_install()"
            popd
            $env:GZIP="-9"; tar -czf "AzurLaneAutoScript-CN-${{ runner.os }}-$($env:PROCESSOR_ARCHITECTURE.ToLower()).tar.gz" AzurLaneAutoScript
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AzurLaneAutoScript-${{ matrix.os }}
          path: |
            AzurLaneAutoScript-${{ runner.os }}-*
      - name: Upload artifacts (CN)
        uses: actions/upload-artifact@v4
        with:
          name: AzurLaneAutoScript-CN-${{ matrix.os }}
          path: |
            AzurLaneAutoScript-CN-${{ runner.os }}-*
      - name: Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            AzurLaneAutoScript-${{ runner.os }}-*
            AzurLaneAutoScript-CN-${{ runner.os }}-*
